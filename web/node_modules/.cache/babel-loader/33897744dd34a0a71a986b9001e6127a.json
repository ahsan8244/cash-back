{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport set from 'lodash/set';\nimport createFormField, { isFormField } from './createFormField';\nimport { hasRules, flattenFields, getErrorStrs, startsWith } from './utils';\n\nfunction partOf(a, b) {\n  return b.indexOf(a) === 0 && ['.', '['].indexOf(b[a.length]) !== -1;\n}\n\nfunction internalFlattenFields(fields) {\n  return flattenFields(fields, function (_, node) {\n    return isFormField(node);\n  }, 'You must wrap field data with `createFormField`.');\n}\n\nvar FieldsStore =\n/*#__PURE__*/\nfunction () {\n  function FieldsStore(_fields) {\n    var _this = this;\n\n    _classCallCheck(this, FieldsStore);\n\n    _defineProperty(this, \"setFieldsInitialValue\", function (initialValues) {\n      var flattenedInitialValues = _this.flattenRegisteredFields(initialValues);\n\n      var fieldsMeta = _this.fieldsMeta;\n      Object.keys(flattenedInitialValues).forEach(function (name) {\n        if (fieldsMeta[name]) {\n          _this.setFieldMeta(name, _objectSpread({}, _this.getFieldMeta(name), {\n            initialValue: flattenedInitialValues[name]\n          }));\n        }\n      });\n    });\n\n    _defineProperty(this, \"getAllValues\", function () {\n      var fieldsMeta = _this.fieldsMeta,\n          fields = _this.fields;\n      return Object.keys(fieldsMeta).reduce(function (acc, name) {\n        return set(acc, name, _this.getValueFromFields(name, fields));\n      }, {});\n    });\n\n    _defineProperty(this, \"getFieldsValue\", function (names) {\n      return _this.getNestedFields(names, _this.getFieldValue);\n    });\n\n    _defineProperty(this, \"getFieldValue\", function (name) {\n      var fields = _this.fields;\n      return _this.getNestedField(name, function (fullName) {\n        return _this.getValueFromFields(fullName, fields);\n      });\n    });\n\n    _defineProperty(this, \"getFieldsError\", function (names) {\n      return _this.getNestedFields(names, _this.getFieldError);\n    });\n\n    _defineProperty(this, \"getFieldError\", function (name) {\n      return _this.getNestedField(name, function (fullName) {\n        return getErrorStrs(_this.getFieldMember(fullName, 'errors'));\n      });\n    });\n\n    _defineProperty(this, \"isFieldValidating\", function (name) {\n      return _this.getFieldMember(name, 'validating');\n    });\n\n    _defineProperty(this, \"isFieldsValidating\", function (ns) {\n      var names = ns || _this.getValidFieldsName();\n\n      return names.some(function (n) {\n        return _this.isFieldValidating(n);\n      });\n    });\n\n    _defineProperty(this, \"isFieldTouched\", function (name) {\n      return _this.getFieldMember(name, 'touched');\n    });\n\n    _defineProperty(this, \"isFieldsTouched\", function (ns) {\n      var names = ns || _this.getValidFieldsName();\n\n      return names.some(function (n) {\n        return _this.isFieldTouched(n);\n      });\n    });\n\n    this.fields = internalFlattenFields(_fields);\n    this.fieldsMeta = {};\n  }\n\n  _createClass(FieldsStore, [{\n    key: \"updateFields\",\n    value: function updateFields(fields) {\n      this.fields = internalFlattenFields(fields);\n    }\n  }, {\n    key: \"flattenRegisteredFields\",\n    value: function flattenRegisteredFields(fields) {\n      var validFieldsName = this.getAllFieldsName();\n      return flattenFields(fields, function (path) {\n        return validFieldsName.indexOf(path) >= 0;\n      }, 'You cannot set a form field before rendering a field associated with the value.');\n    }\n  }, {\n    key: \"setFields\",\n    value: function setFields(fields) {\n      var _this2 = this;\n\n      var fieldsMeta = this.fieldsMeta;\n\n      var nowFields = _objectSpread({}, this.fields, fields);\n\n      var nowValues = {};\n      Object.keys(fieldsMeta).forEach(function (f) {\n        nowValues[f] = _this2.getValueFromFields(f, nowFields);\n      });\n      Object.keys(nowValues).forEach(function (f) {\n        var value = nowValues[f];\n\n        var fieldMeta = _this2.getFieldMeta(f);\n\n        if (fieldMeta && fieldMeta.normalize) {\n          var nowValue = fieldMeta.normalize(value, _this2.getValueFromFields(f, _this2.fields), nowValues);\n\n          if (nowValue !== value) {\n            nowFields[f] = _objectSpread({}, nowFields[f], {\n              value: nowValue\n            });\n          }\n        }\n      });\n      this.fields = nowFields;\n    }\n  }, {\n    key: \"resetFields\",\n    value: function resetFields(ns) {\n      var fields = this.fields;\n      var names = ns ? this.getValidFieldsFullName(ns) : this.getAllFieldsName();\n      return names.reduce(function (acc, name) {\n        var field = fields[name];\n\n        if (field && 'value' in field) {\n          acc[name] = {};\n        }\n\n        return acc;\n      }, {});\n    }\n  }, {\n    key: \"setFieldMeta\",\n    value: function setFieldMeta(name, meta) {\n      this.fieldsMeta[name] = meta;\n    }\n  }, {\n    key: \"setFieldsAsDirty\",\n    value: function setFieldsAsDirty() {\n      var _this3 = this;\n\n      Object.keys(this.fields).forEach(function (name) {\n        var field = _this3.fields[name];\n        var fieldMeta = _this3.fieldsMeta[name];\n\n        if (field && fieldMeta && hasRules(fieldMeta.validate)) {\n          _this3.fields[name] = _objectSpread({}, field, {\n            dirty: true\n          });\n        }\n      });\n    }\n  }, {\n    key: \"getFieldMeta\",\n    value: function getFieldMeta(name) {\n      this.fieldsMeta[name] = this.fieldsMeta[name] || {};\n      return this.fieldsMeta[name];\n    }\n  }, {\n    key: \"getValueFromFields\",\n    value: function getValueFromFields(name, fields) {\n      var field = fields[name];\n\n      if (field && 'value' in field) {\n        return field.value;\n      }\n\n      var fieldMeta = this.getFieldMeta(name);\n      return fieldMeta && fieldMeta.initialValue;\n    }\n  }, {\n    key: \"getValidFieldsName\",\n    value: function getValidFieldsName() {\n      var _this4 = this;\n\n      var fieldsMeta = this.fieldsMeta;\n      return fieldsMeta ? Object.keys(fieldsMeta).filter(function (name) {\n        return !_this4.getFieldMeta(name).hidden;\n      }) : [];\n    }\n  }, {\n    key: \"getAllFieldsName\",\n    value: function getAllFieldsName() {\n      var fieldsMeta = this.fieldsMeta;\n      return fieldsMeta ? Object.keys(fieldsMeta) : [];\n    }\n  }, {\n    key: \"getValidFieldsFullName\",\n    value: function getValidFieldsFullName(maybePartialName) {\n      var maybePartialNames = Array.isArray(maybePartialName) ? maybePartialName : [maybePartialName];\n      return this.getValidFieldsName().filter(function (fullName) {\n        return maybePartialNames.some(function (partialName) {\n          return fullName === partialName || startsWith(fullName, partialName) && ['.', '['].indexOf(fullName[partialName.length]) >= 0;\n        });\n      });\n    }\n  }, {\n    key: \"getFieldValuePropValue\",\n    value: function getFieldValuePropValue(fieldMeta) {\n      var name = fieldMeta.name,\n          getValueProps = fieldMeta.getValueProps,\n          valuePropName = fieldMeta.valuePropName;\n      var field = this.getField(name);\n      var fieldValue = 'value' in field ? field.value : fieldMeta.initialValue;\n\n      if (getValueProps) {\n        return getValueProps(fieldValue);\n      }\n\n      return _defineProperty({}, valuePropName, fieldValue);\n    }\n  }, {\n    key: \"getField\",\n    value: function getField(name) {\n      return _objectSpread({}, this.fields[name], {\n        name: name\n      });\n    }\n  }, {\n    key: \"getNotCollectedFields\",\n    value: function getNotCollectedFields() {\n      var _this5 = this;\n\n      var fieldsName = this.getValidFieldsName();\n      return fieldsName.filter(function (name) {\n        return !_this5.fields[name];\n      }).map(function (name) {\n        return {\n          name: name,\n          dirty: false,\n          value: _this5.getFieldMeta(name).initialValue\n        };\n      }).reduce(function (acc, field) {\n        return set(acc, field.name, createFormField(field));\n      }, {});\n    }\n  }, {\n    key: \"getNestedAllFields\",\n    value: function getNestedAllFields() {\n      var _this6 = this;\n\n      return Object.keys(this.fields).reduce(function (acc, name) {\n        return set(acc, name, createFormField(_this6.fields[name]));\n      }, this.getNotCollectedFields());\n    }\n  }, {\n    key: \"getFieldMember\",\n    value: function getFieldMember(name, member) {\n      return this.getField(name)[member];\n    }\n  }, {\n    key: \"getNestedFields\",\n    value: function getNestedFields(names, getter) {\n      var fields = names || this.getValidFieldsName();\n      return fields.reduce(function (acc, f) {\n        return set(acc, f, getter(f));\n      }, {});\n    }\n  }, {\n    key: \"getNestedField\",\n    value: function getNestedField(name, getter) {\n      var fullNames = this.getValidFieldsFullName(name);\n\n      if (fullNames.length === 0 || // Not registered\n      fullNames.length === 1 && fullNames[0] === name // Name already is full name.\n      ) {\n          return getter(name);\n        }\n\n      var isArrayValue = fullNames[0][name.length] === '[';\n      var suffixNameStartIndex = isArrayValue ? name.length : name.length + 1;\n      return fullNames.reduce(function (acc, fullName) {\n        return set(acc, fullName.slice(suffixNameStartIndex), getter(fullName));\n      }, isArrayValue ? [] : {});\n    }\n  }, {\n    key: \"isValidNestedFieldName\",\n    // @private\n    // BG: `a` and `a.b` cannot be use in the same form\n    value: function isValidNestedFieldName(name) {\n      var names = this.getAllFieldsName();\n      return names.every(function (n) {\n        return !partOf(n, name) && !partOf(name, n);\n      });\n    }\n  }, {\n    key: \"clearField\",\n    value: function clearField(name) {\n      delete this.fields[name];\n      delete this.fieldsMeta[name];\n    }\n  }]);\n\n  return FieldsStore;\n}();\n\nexport default function createFieldsStore(fields) {\n  return new FieldsStore(fields);\n}","map":null,"metadata":{},"sourceType":"module"}